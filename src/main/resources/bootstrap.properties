###################################################################################################
# Spring Cloud Config Server
###################################################################################################
spring.cloud.config.server.git.uri=${GIT_URI}

# To use HTTP basic authentication on the remote repository, add the username and password
# properties separately (not in the URL)
spring.cloud.config.server.git.username=${GIT_USERNAME}
spring.cloud.config.server.git.password=${GIT_PASSWORD}

# You can configure the time, in seconds, that the configuration server will wait to acquire an
# HTTP connection. Use the git.timeout property.
spring.cloud.config.server.git.timeout=${GIT_TIMEOUT:4}

# The configuration server’s validation of the Git server’s SSL certificate can be disabled by
# setting the git.skipSslValidation property to true (spring default is false).
spring.cloud.config.server.git.skip-ssl-validation=${GIT_SKIP_SSL_VALIDATION:false}

# Spring Cloud Config Server also supports a search path with placeholders for the {application}
# and {profile} (and {label} if you need it).
spring.cloud.config.server.git.search-paths=${GIT_SEARCH_PATSH:{application}}

# Spring Cloud Config Server makes a clone of the remote git repository in case the local copy gets
# dirty (for example, folder content changes by an OS process) such that Spring Cloud Config Server
# cannot update the local copy from remote repository.
# To solve this issue, there is a force-pull property that makes Spring Cloud Config Server force
# pull from the remote repository if the local copy is dirty (spring default is false).
spring.cloud.config.server.git.force-pull=${GIT_FORCE_PULL:true}

# As Spring Cloud Config Server has a clone of the remote git repository after check-outing branch
# to local repo (e.g fetching properties by label) it will keep this branch forever or till the
# next server restart (which creates new local repo). So there could be a case when remote branch
# is deleted but local copy of it is still available for fetching. And if Spring Cloud Config
# Server client service starts with --spring.cloud.config.label=deletedRemoteBranch,master it will
# fetch properties from deletedRemoteBranch local branch, but not from master.
# In order to keep local repository branches clean and up to remote - deleteUntrackedBranches
# property could be set. It will make Spring Cloud Config Server force delete untracked branches
# from local repository (spring default is false).
spring.cloud.config.server.git.delete-untracked-branches=${GIT_DELETE_UNTRACKED_BRANCHES:true}

# You can control how often the config server will fetch updated configuration data from your Git
# backend by using spring.cloud.config.server.git.refreshRate. The value of this property is
# specified in seconds. By default the value is 0, meaning the config server will fetch updated
# configuration from the Git repo every time it is requested (default is 0).
spring.cloud.config.server.git.refresh-rate=${GIT_REFRESH_RATE:0}

# With VCS-based backends (git, svn), files are checked out or cloned to the local filesystem. By
# default, they are put in the system temporary directory with a prefix of config-repo-. On linux,
# for example, it could be /tmp/config-repo-<randomid>. Some operating systems routinely clean out
# temporary directories. This can lead to unexpected behavior, such as missing properties. To avoid
# this problem, change the directory that Config Server uses by setting
# spring.cloud.config.server.git.basedir or spring.cloud.config.server.svn.basedir to a directory
# that does not reside in the system temp structure.
spring.cloud.config.server.git.basedir=${GIT_BASEDIR:/tmp/.config-repo}
